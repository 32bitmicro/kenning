image: $CI_BASE_IMAGE

.ace: &ace
    tags: ['ace-x86_64']

.common_only: &common_only
    only:
        - main
        - dev
        - merge_requests

variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive

stages:
    - lint
    - tests
    - docs
    - docs-deploy

pre-commit:
    image: $CI_LINT_IMAGE
    <<: *ace
    <<: *common_only
    stage: lint
    script:
        - pre-commit run --all-files

pytest:
    <<: *ace
    <<: *common_only
    stage: tests
    before_script:
        - /scripts/prepare_environment.sh .
        - pip uninstall -y pipeline_manager
        - pip install -e ".[test,pipeline_manager]"
    script:
        - PYTHONPATH=$(pwd):$PYTHONPATH pytest -ra kenning -m "(not docs_gallery) and (not docs)" -n=auto --dist=loadgroup --order-dependencies --color=yes --report-log=log.json --test-docs-log-dir log_docs -vvl
    artifacts:
        paths:
            - log.json
            - log_docs/*.log
        when: always

.pytest-docs: &pytest-docs
    image: $CI_MINIMAL_IMAGE
    stage: tests
    before_script:
        - /scripts/prepare_environment.sh .
        # Prepare Docker
        - apt-get update --allow-releaseinfo-change -y > /dev/null 2> /dev/null
        - apt-get -qqy --no-install-recommends install docker.io cgroupfs-mount crun fuse-overlayfs pigz ca-certificates > /dev/null
        - cgroupfs-mount
        - dockerd -s fuse-overlayfs --add-runtime=crun=/usr/bin/crun --default-runtime=crun --config-file="" > /dev/null 2> /dev/null &
        - while ! test -S /var/run/docker.sock; do echo "Waiting for Docker..." && sleep 1; done; docker info
        - trap "kill $(cat /var/run/docker.pid)" EXIT
    script:
        - PYTHONPATH=$(pwd):$PYTHONPATH pytest -ra kenning/tests/docs/test_snippets.py -m $TESTS_SCOPE -n=4 --dist=loadgroup --order-dependencies --color=yes --report-log=log.json --test-docs-log-dir $TESTS_SCOPE -vvl
    artifacts:
        paths:
            - log.json
            - log_gallery/*.log
        when: always

docs-tests:
    <<: *ace
    variables:
        TESTS_SCOPE: 'docs'
    only:
        refs:
            - main
            - dev
    <<: *pytest-docs

docs-tests-manual:
    <<: *ace
    variables:
        TESTS_SCOPE: 'docs'
    except:
        refs:
            - main
            - dev
    only:
        refs:
            - merge_requests
    <<: *pytest-docs
    when: manual

docs-gallery-tests:
    <<: *ace
    variables:
        TESTS_SCOPE: 'docs_gallery'
    only:
        refs:
            - main
            - dev
    <<: *pytest-docs

docs-gallery-tests-manual:
    <<: *ace
    variables:
        TESTS_SCOPE: 'docs_gallery'
    except:
        refs:
            - main
            - dev
    only:
        refs:
            - merge_requests
    <<: *pytest-docs
    when: manual

sample-compilation:
    <<: *ace
    <<: *common_only
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        - ./scripts/tvm-tensorflow-classification-cpu.sh
    artifacts:
        paths:
            - build/local-cpu-tvm-tensorflow-classification.json
            - docs/source/generated

sample-pipeline-optimization:
    <<: *ace
    <<: *common_only
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        - ./scripts/optimization-tflite-tvm-tensorflow-magic-wand.sh
    artifacts:
        paths:
            - build/

sample-client-server-scenario:
    <<: *ace
    <<: *common_only
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        - apt-get update && apt-get install -y procps
        - sed -i 's/10.9.8.7/localhost/g' ./scripts/jsonconfigs/tflite-tvm-classification-client-server.json
        - ./scripts/json-tflite-tvm-classification-server.sh &
        - PID=$!
        - ./scripts/json-tflite-tvm-classification-client.sh || CLIENT_RET=$?
        - kill -SIGINT $(pgrep -f "kenning server") && wait $PID || SERVER_RET=$?
        - exit $((CLIENT_RET | SERVER_RET))
    artifacts:
        paths:
            - build/
    allow_failure: false

docs:
    image: $CI_DOCS_IMAGE
    <<: *ace
    <<: *common_only
    stage: docs
    dependencies:
        - sample-compilation
    variables:
        DOCS_DIR: './docs'
    script:
        - cd $DOCS_DIR
        - echo -en "\nhtml_js_files = [ '$ANNOTANT' ]" >> source/conf.py
        - make html latexpdf
        - cp build/latex/*.pdf build/html/
        - tar cf $CI_DOCS_ARCHIVE -C build/html/ .
        - mv $CI_DOCS_ARCHIVE ..
    artifacts:
        paths:
            - $DOCS_DIR/build/html
            - $DOCS_DIR/build/latex/*.pdf
            - $CI_DOCS_ARCHIVE

linkcheck:
    image: $CI_DOCS_IMAGE
    <<: *ace
    <<: *common_only
    stage: docs
    dependencies:
        - sample-compilation
    variables:
        DOCS_DIR: './docs'
    script:
        - cd $DOCS_DIR
        - make linkcheck
    allow_failure: true

docs-deploy:
    <<: *common_only
    image: $CI_DOCS_DOCKER_IMAGE
    dependencies:
        - docs
    variables:
        GIT_STRATEGY: none
    stage: docs-deploy
    tags:
        - docs
    script:
        - echo 'Deploying docs'
    artifacts:
        paths:
            - $CI_DOCS_ARCHIVE
