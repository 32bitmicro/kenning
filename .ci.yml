image: $CI_BASE_IMAGE

.common_only: &common_only
    only:
        - main
        - dev
        - merge_requests

variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive
    DOCS_DIR: './docs'

stages:
    - lint
    - prepare
    - tests
    - docs
    - docs-deploy

pre-commit:
    image: $CI_LINT_IMAGE
    <<: *common_only
    stage: lint
    script:
        - pre-commit run --all-files || (echo "pre-commit changes:" && git diff && false)


.nox-prepare-deps:
    <<: *common_only
    image: $CI_NOX_IMAGE
    stage: prepare
    script:
        - for v in $PY_VERSIONS; do nox -s "get_deps-${v}(device='${DEVICE}')"; done
    artifacts:
        paths:
            - "kenning-deps"
        expire_in: 1 week

nox-prepare-deps:
    extends: .nox-prepare-deps
    variables:
        DEVICE: any
    only:
        - dev
        - main
        - schedules

nox-prepare-deps-manual:
    extends: .nox-prepare-deps
    variables:
        DEVICE: any
    except:
        - dev
        - main
    when: manual

pytest:
    <<: *common_only
    dependencies: []
    stage: tests
    variables:
        MARKS: "(not docs_gallery) and (not docs) and (not gpu) and (not automl) and (not compat_matrix)"
    script:
        - /scripts/prepare_environment.sh .
        - pip install -e ".[pipeline_manager,test,llm]"
        - wget https://builds.renode.io/renode-latest.pkg.tar.xz
        - export PYRENODE_PKG=$(realpath renode-latest.pkg.tar.xz)
        - PYTHONPATH=$(pwd):$PYTHONPATH timeout --preserve-status -s INT -k 118m 115m pytest kenning -m "$MARKS" -n=auto --cov=kenning --cov-report=html
    artifacts:
        paths:
            - log.json
            - log_docs/*.log
            - $DOCS_DIR/source/generated/coverage/*
        when: always

pytest-automl:
    <<: *common_only
    dependencies: []
    stage: tests
    variables:
        MARKS: "automl"
    script:
        - /scripts/prepare_environment.sh .
        - PYTHONPATH=$(pwd):$PYTHONPATH timeout --preserve-status -s INT -k 12m 10m pytest kenning/tests/core/test_automl.py -m "$MARKS" -n=1
    artifacts:
        paths:
            - log.json
            - log_docs/*.log
        when: always

pytest-compatibility:
    <<: *common_only
    stage: tests
    variables:
        MARKS: "compat_matrix"
    script:
        - /scripts/prepare_environment.sh .
        - pip install -e ".[test,llm]"
        - PYTHONPATH=$(pwd):$PYTHONPATH timeout --preserve-status -s INT -k 17m 15m pytest kenning/tests/compatibility -m "$MARKS" -n=1 --xfail-tb
    artifacts:
        paths:
            - log.json
            - compatibility/*
        when: always

.pytest-docs: &pytest-docs
    image: $CI_MINIMAL_IMAGE
    dependencies: []
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        # Prepare Docker
        - /scripts/prepare_docker.sh
        - trap "kill $(cat /var/run/docker.pid)" EXIT
        - pip install -e ".[test]"
        - PYTHONPATH=$(pwd):$PYTHONPATH pytest kenning/tests/docs/test_snippets.py -m $TESTS_SCOPE -n=4 --test-docs-log-dir $TESTS_SCOPE
    artifacts:
        paths:
            - log.json
            - $TESTS_SCOPE/*.log
        when: always

.nox-pytest:
    <<: *common_only
    image: $CI_NOX_IMAGE
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        - /scripts/prepare_deps.sh nox-prepare-deps-manual nox-prepare-deps
        - export NOX_PYTEST_EXPLICIT_DOWNLOAD=y
        - nox -vs "run_pytest-${PY_VERSION}(device='any')"
    artifacts:
        paths:
            - pytest-reports
            - requirements

nox-pytest-3.10:
    extends: .nox-pytest
    variables:
        PY_VERSION: "3.10"

nox-pytest-3.11:
    extends: .nox-pytest
    variables:
        PY_VERSION: "3.11"

.nox-gallery-tests-base:
    <<: *common_only
    image: $CI_NOX_IMAGE
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        - /scripts/prepare_docker.sh
        - trap "kill $(cat /var/run/docker.pid)" EXIT
        - nox -vs run_gallery_tests
    artifacts:
        when: always
        paths:
            - pytest-reports
            - log_docs

nox-gallery-tests-manual:
    extends: .nox-gallery-tests-base
    except:
        refs:
            - main
            - dev
    when: manual
    allow_failure: true

nox-gallery-tests:
    extends: .nox-gallery-tests-base
    only:
        refs:
            - main
            - dev
    allow_failure: true

docs-tests:
    <<: *common_only
    variables:
        TESTS_SCOPE: 'docs'
    <<: *pytest-docs

docs-gallery-tests:
    <<: *common_only
    variables:
        TESTS_SCOPE: 'docs_gallery'
    <<: *pytest-docs

sample-compilation:
    <<: *common_only
    dependencies: []
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        - ./scripts/tvm-tensorflow-classification-cpu.sh
    artifacts:
        paths:
            - build/local-cpu-tvm-tensorflow-classification.json
            - docs/source/generated

sample-pipeline-optimization:
    <<: *common_only
    dependencies: []
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        - ./scripts/optimization-tflite-tvm-tensorflow-magic-wand.sh
    artifacts:
        paths:
            - build/

sample-client-server-scenario:
    <<: *common_only
    dependencies: []
    stage: tests
    script:
        - /scripts/prepare_environment.sh .
        - apt-get update && apt-get install -y procps
        - ./scripts/json-tflite-tvm-classification-server.sh &
        - PID=$!
        - ./scripts/json-tflite-tvm-classification-client.sh || CLIENT_RET=$?
        - kill -SIGINT $(pgrep -f "kenning server") && wait $PID || SERVER_RET=$?
        - exit $((CLIENT_RET | SERVER_RET))
    artifacts:
        paths:
            - build/

docs:
    image: $CI_DOCS_IMAGE
    <<: *common_only
    dependencies: []
    stage: docs
    dependencies:
        - pytest
        - sample-compilation
    script:
        - cd $DOCS_DIR
        - echo -en "\nhtml_js_files = [ '$ANNOTANT' ]" >> source/conf.py
        - make html latexpdf
        - cp build/latex/*.pdf build/html/
        - tar cf $CI_DOCS_ARCHIVE -C build/html/ .
        - mv $CI_DOCS_ARCHIVE ..
    artifacts:
        paths:
            - $DOCS_DIR/build/html
            - $DOCS_DIR/build/latex/*.pdf
            - $CI_DOCS_ARCHIVE

linkcheck:
    image: $CI_DOCS_IMAGE
    <<: *common_only
    stage: docs
    dependencies:
        - sample-compilation
    script:
        - cd $DOCS_DIR
        - make linkcheck
    allow_failure: true

docs-deploy:
    <<: *common_only
    image: $CI_DOCS_DOCKER_IMAGE
    dependencies:
        - docs
    variables:
        GIT_STRATEGY: none
    stage: docs-deploy
    tags:
        - docs
    script:
        - echo 'Deploying docs'
    artifacts:
        paths:
            - $CI_DOCS_ARCHIVE
