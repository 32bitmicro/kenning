image: $CI_IMAGE

.ace: &ace
    tags: ['ace-x86_64']

.common_only: &common_only
    only:
        - main
        - dev
        - merge_requests

variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive

stages:
    - lint
    - tests
    - docs
    - docs-deploy

flake8:
    <<: *ace
    <<: *common_only
    stage: lint
    script:
        - flake8 .
    allow_failure: false

pydocstyle:
    <<: *ace
    <<: *common_only
    stage: lint
    script:
        - pydocstyle .
    allow_failure: false

pytest:
    <<: *ace
    <<: *common_only
    stage: tests
    script:
        - mkdir -p build
        - cp -r /data/* build/
        - cp -r build/COCODataset2017 build/VisualWakeWordsDataset
        - python setup.py develop
        - PYTHONPATH=$(pwd):$PYTHONPATH pytest -ra kenning -n=auto --dist=loadgroup --color=yes --report-log=log.json -vvl
    artifacts:
        paths:
            - log.json
        when: always
    allow_failure: false

kenning-cli:
    <<: *ace
    <<: *common_only
    stage: tests
    script:
        - pip install .
        - kenning -h
        - kenning test report -h
    allow_failure: false

sample-compilation:
    <<: *ace
    <<: *common_only
    stage: tests
    script:
        - mkdir build
        - ln -s /pet-dataset build/pet-dataset
        - sed -i '/download-dataset/d' ./scripts/tvm-tensorflow-classification-cpu.sh
        - ./scripts/tvm-tensorflow-classification-cpu.sh
    artifacts:
        paths:
            - build/local-cpu-tvm-tensorflow-classification.json
            - docs/source/generated
    allow_failure: false

sample-pipeline-optimization:
    <<: *ace
    <<: *common_only
    stage: tests
    script:
        - mkdir -p build
        - ln -s /data/MagicWandDataset build/MagicWandDataset
        - ./scripts/optimization-tflite-tvm-tensorflow-magic-wand.sh
    artifacts:
        paths:
            - build/
    allow_failure: false

docs:
    <<: *ace
    <<: *common_only
    stage: docs
    dependencies:
        - sample-compilation
    variables:
        DOCS_DIR: './docs'
    script:
        - cd $DOCS_DIR
        - echo -en "\nhtml_js_files = [ '$ANNOTANT' ]" >> source/conf.py
        - make html latexpdf
        - cp build/latex/*.pdf build/html/
        - tar cf $CI_DOCS_ARCHIVE -C build/html/ .
        - mv $CI_DOCS_ARCHIVE ..
    artifacts:
        paths:
            - $DOCS_DIR/build/html
            - $DOCS_DIR/build/latex/*.pdf
            - $CI_DOCS_ARCHIVE
    allow_failure: false

linkcheck:
    <<: *ace
    <<: *common_only
    stage: docs
    dependencies:
        - sample-compilation
    variables:
        DOCS_DIR: './docs'
    script:
        - cd $DOCS_DIR
        - make linkcheck
    allow_failure: true

docs-deploy:
    <<: *common_only
    image: $CI_DOCS_DOCKER_IMAGE
    dependencies:
        - docs
    variables:
        GIT_STRATEGY: none
    stage: docs-deploy
    tags:
        - docs
    script:
        - echo 'Deploying docs'
    artifacts:
        paths:
            - $CI_DOCS_ARCHIVE
    allow_failure: false
